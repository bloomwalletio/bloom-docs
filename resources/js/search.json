[[{"l":"Welcome","p":["Welcome to the Bloom docs \uD83C\uDF38","Here you will find all the documentation you need to develop with Bloom. Please feel free to reach out if you have any questions!"]}],[{"l":"Deep Links","p":["Guide API Reference Specification"]}],[{"l":"Guide","p":["Coming soon."]}],[{"l":"API Reference","p":["Coming soon."]}],[{"l":"Specification","p":["Deep links are special URLs that, when navigated to, open applications rather than a website. In our case we are interested in the user experiences that they enable between websites, applications, platforms, etc. by providing more interoperability.","Bloom has its own deep link scheme, exposing (limited) functionality that is required in some type of user flow. A trivial example would be a user who buys native tokens on Soonaverse and must make a payment transaction to execute the buy order. Clicking on a deep link embedded inside the Soonaverse platform triggers Bloom to open and auto-fill the transaction data as necessary, making it a simple confirm and click job for the user.","Bloom will NEVER automatically execute actions initiated by a deep link; they should ALWAYS require manual confirmation on behalf of the user."]},{"l":"Scheme","p":["The Bloom deep link scheme can be broken down to the following (simple) syntax:","The parameters are as follows:","stage- indicates a specific stage of the app to target, options are:","alpha- the first available version of Bloom containing brand new features","beta- the next available version of Bloom containing new but slightly tested features","laters- the Bloom Shimmer version, containing new and well-tested features","context- the part of Bloom that contains the operation, options are:","wallet- managing coins and tokens","collectibles- managing NFTs","governance- managing voting events and proposals","operation- an operation within a specific context (see below for more detail)","param- query parameter(s) relevant for the specified operation","If you wish to target the production version, simply omit this from the prefix:"]},{"l":"Contexts"},{"l":"Wallet"},{"l":"Send Form","p":["This operation brings the user to the send form popup:","The deep link structure is as follows:","The following parameters are required:","address- the recipient's address where the funds will be sent to","MUST be a Bech32 address; considering support for other address types in the future","amount- the amount of tokens to send in the transaction","MAY contain a decimal so long as it makes sense given the value of the unit param (see below)","The following parameters are optional:","unit- a specified denomination of the token to use, if applicable (default for IOTA is Mi, SMR is SMR)","assetId- the identifier of the asset to send, e.g. 4218(IOTA), 4219(SMR), or a native token ID (default is base token of the network, i.e. IOTA or SMR)","metadata- a string of text to embed as metadata in the transaction","tag- a string to tag the transaction for indexing purposes","Example:","Click me!","Source:"]},{"l":"Send Confirmation","p":["address- the recipient's address where the funds will be sent to","amount- the amount of tokens to send in the transaction","assetId- the identifier of the asset to send, e.g. 4218(IOTA), 4219(SMR), or a native token ID (default is base token of the network, i.e. IOTA or SMR)","Click me!","disableChangeExpiration- prevents the user from being able to change the expiration time of the transaction","disableToggleGift- prevents the user from being able to toggle the option to gift the storage deposit","Example:","giftStorageDeposit- gifts the tokens used in funding the storage deposit for a transaction","MAY contain a decimal so long as it makes sense given the value of the unit param (see below)","metadata- a string of text to embed as metadata in the transaction","MUST be a Bech32 address; considering support for other address types in the future","Source:","surplus- send additional amounts of the base token when transferring native tokens","tag- a string to tag the transaction for indexing purposes","The deep link structure is as follows:","The following parameters are optional:","The following parameters are required:","This operation brings the user to the send confirmation popup:","unit- a specified denomination of the token to use, if applicable (default for IOTA is Mi, SMR is SMR)"]},{"l":"Collectibles","p":["Coming \uD83D\uDD1C"]},{"l":"Governance"},{"l":"Add Proposal","p":["This operation brings the user to the add proposal popup:","The deep link structure is as follows:","The following parameters are required:","eventId- the event ID of the proposal's corresponding participation event in the network","The following parameter(s) are optional:","nodeUrl- the specific node that is tracking the proposal's corresponding participation event","If the node requires authentication (e.g. username and password, JWT), the user will be required to manually enter the information.","Example:","Click me!","Source:"]}],[{"l":"WalletConnect","p":["To be able to connect with the IOTA / Shimmer ecosystem, Bloom implements WalletConnect(ref: https://docs.walletconnect.com/quickstart). WalletConnect is a generic interface, which offers the user the freedom to connect their trusted wallet to the dApp.","If you're a dApp developer and plan to implement WalletConnect into your dApp, checkout https://docs.walletconnect.com/web3modal/about.","Include Bloom Supported Networks and Methods"]}],[{"l":"Guide","p":["WalletConnect s Web3Modal has many suggestions on wallets on all ecosystems, but these suggestions can be adapted and changed by the dApp developer. If Bloom wallet implements features that your app requires, or if you generally want to recomment Bloom for your dApp's users, you can include the following code into your code base:","If your dApp requires a feature that most of the wallets don't implement, but Bloom does, you can use the following code instead of the code on top:"]}],[{"l":"EIP155 RPC"}],[{"l":"Supported Methods"},{"l":"personal_sign","p":["The sign method calculates an Ethereum specific signature with: sign(keccak256(\\x19Ethereum Signed Message:\\n + len(message) + message)).","By adding a prefix to the message makes the calculated signature recognizable as an Ethereum specific signature. This prevents misuse where a malicious DApp can sign arbitrary data (e.g. transaction) and use the signature to impersonate the victim.","Note See ecRecover to verify the signature."]},{"l":"Parameters","p":["message, account","DATA, N Bytes - message to sign. DATA, 20 Bytes - address."]},{"l":"Returns","p":["DATA: Signature"]},{"l":"Example"},{"l":"eth_sign","p":["The sign method calculates an Ethereum specific signature with: sign(keccak256(\\x19Ethereum Signed Message:\\n + len(message) + message)).","By adding a prefix to the message makes the calculated signature recognizable as an Ethereum specific signature. This prevents misuse where a malicious DApp can sign arbitrary data (e.g. transaction) and use the signature to impersonate the victim.","Note the address to sign with must be unlocked."]},{"i":"parameters-1","l":"Parameters","p":["account, message","DATA, 20 Bytes - address. DATA, N Bytes - message to sign."]},{"i":"returns-1","l":"Returns","p":["DATA: Signature"]},{"i":"example-1","l":"Example","p":["An example how to use solidity ecrecover to verify the signature calculated with eth_sign can be found here. The contract is deployed on the testnet Ropsten and Rinkeby."]}],[{"l":"TIP32 RPC"},{"l":"TBD"}],[{"l":"Supported Networks and Methods","p":["Bloom currently supports the following events for the following chains:"]},{"l":"EIP155"},{"l":"Supported Networks","p":["eip155:1073, eip155:1074"]},{"l":"Supported Methods","p":["personal_sign, eth_sign"]},{"l":"Implemented Events","p":["accountsChanged, chainChanged"]},{"l":"TIP32"},{"i":"supported-networks-1","l":"Supported Networks"},{"i":"supported-methods-1","l":"Supported Methods"},{"i":"implemented-events-1","l":"Implemented Events","p":["accountsChanged, chainChanged"]}]]